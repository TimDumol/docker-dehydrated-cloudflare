########################################################
# This is the main config file for dehydrated          #
#                                                      #
# This file is looked for in the following locations:  #
# $SCRIPTDIR/config (next to this script)              #
# /usr/local/etc/dehydrated/config                     #
# /etc/dehydrated/config                               #
# ${PWD}/config (in current working-directory)         #
#                                                      #
# Default values of this config are in comments        #
########################################################

# Resolve names to addresses of IP version only. (curl)
# supported values: 4, 6
# default: <unset>
#IP_VERSION=
{{if .Env.IP_VERSION}}
IP_VERSION={{.Env.IP_VERSION}}
{{end}}

# Path to certificate authority (default: https://acme-v01.api.letsencrypt.org/directory)
#CA="https://acme-v01.api.letsencrypt.org/directory"
{{if .Env.CA}}
CA={{.Env.CA}}
{{end}}

# Path to certificate authority license terms redirect (default: https://acme-v01.api.letsencrypt.org/terms)
#CA_TERMS="https://acme-v01.api.letsencrypt.org/terms"
{{if .Env.CA_TERMS}}
CA_TERMS={{.Env.CA_TERMS}}
{{end}}

# Path to license agreement (default: <unset>)
#LICENSE=""
{{if .Env.LICENSE}}
LICENSE={{.Env.LICENSE}}
{{end}}

# Which challenge should be used? Currently http-01 and dns-01 are supported
#CHALLENGETYPE="http-01"
{{if .Env.CHALLENGETYPE}}
CHALLENGETYPE={{.Env.CHALLENGETYPE}}
{{end}}

# Path to a directory containing additional config files, allowing to override
# the defaults found in the main configuration file. Additional config files
# in this directory needs to be named with a '.sh' ending.
# default: <unset>
#CONFIG_D=
{{if .Env.CONFIG_D}}
CONFIG_D={{.Env.CONFIG_D}}
{{end}}

# Base directory for account key, generated certificates and list of domains (default: $SCRIPTDIR -- uses config directory if undefined)
#BASEDIR=$SCRIPTDIR
{{if .Env.BASEDIR}}
BASEDIR={{.Env.BASEDIR}}
{{end}}

# File containing the list of domains to request certificates for (default: $BASEDIR/domains.txt)
#DOMAINS_TXT="${BASEDIR}/domains.txt"
{{if .Env.DOMAINS_TXT}}
DOMAINS_TXT={{.Env.DOMAINS_TXT}}
{{end}}

# Output directory for generated certificates
#CERTDIR="${BASEDIR}/certs"
{{if .Env.CERTDIR}}
CERTDIR={{.Env.CERTDIR}}
{{end}}

# Directory for account keys and registration information
#ACCOUNTDIR="${BASEDIR}/accounts"
{{if .Env.ACCOUNTDIR}}
ACCOUNTDIR={{.Env.ACCOUNTDIR}}
{{end}}

# Output directory for challenge-tokens to be served by webserver or deployed in HOOK (default: /var/www/dehydrated)
#WELLKNOWN="/var/www/dehydrated"
{{if .Env.WELLKNOWN}}
WELLKNOWN={{.Env.WELLKNOWN}}
{{end}}

# Default keysize for private keys (default: 4096)
#KEYSIZE="4096"
{{if .Env.KEYSIZE}}
KEYSIZE={{.Env.KEYSIZE}}
{{end}}

# Path to openssl config file (default: <unset> - tries to figure out system default)
#OPENSSL_CNF=
{{if .Env.OPENSSL_CNF}}
OPENSSL_CNF={{.Env.OPENSSL_CNF}}
{{end}}

# Path to OpenSSL binary (default: "openssl")
#OPENSSL="openssl"
{{if .Env.OPENSSL}}
OPENSSL={{.Env.OPENSSL}}
{{end}}

# Extra options passed to the curl binary (default: <unset>)
#CURL_OPTS=
{{if .Env.CURL_OPTS}}
CURL_OPTS={{.Env.CURL_OPTS}}
{{end}}

# Program or function called in certain situations
#
# After generating the challenge-response, or after failed challenge (in this case altname is empty)
# Given arguments: clean_challenge|deploy_challenge altname token-filename token-content
#
# After successfully signing certificate
# Given arguments: deploy_cert domain path/to/privkey.pem path/to/cert.pem path/to/fullchain.pem
#
# BASEDIR and WELLKNOWN variables are exported and can be used in an external program
# default: <unset>
#HOOK=
{{if .Env.HOOK}}
HOOK={{.Env.HOOK}}
{{end}}

# Chain clean_challenge|deploy_challenge arguments together into one hook call per certificate (default: no)
#HOOK_CHAIN="no"
{{if .Env.HOOK_CHAIN}}
HOOK_CHAIN={{.Env.HOOK_CHAIN}}
{{end}}

# Minimum days before expiration to automatically renew certificate (default: 30)
#RENEW_DAYS="30"
{{if .Env.RENEW_DAYS}}
RENEW_DAYS={{.Env.RENEW_DAYS}}
{{end}}

# Regenerate private keys instead of just signing new certificates on renewal (default: yes)
#PRIVATE_KEY_RENEW="yes"
{{if .Env.PRIVATE_KEY_RENEW}}
PRIVATE_KEY_RENEW={{.Env.PRIVATE_KEY_RENEW}}
{{end}}

# Create an extra private key for rollover (default: no)
#PRIVATE_KEY_ROLLOVER="no"
{{if .Env.PRIVATE_KEY_ROLLOVER}}
PRIVATE_KEY_ROLLOVER={{.Env.PRIVATE_KEY_ROLLOVER}}
{{end}}

# Which public key algorithm should be used? Supported: rsa, prime256v1 and secp384r1
#KEY_ALGO=rsa
{{if .Env.KEY_ALGO}}
KEY_ALGO={{.Env.KEY_ALGO}}
{{end}}

# E-mail to use during the registration (default: <unset>)
#CONTACT_EMAIL=
{{if .Env.CONTACT_EMAIL}}
CONTACT_EMAIL={{.Env.CONTACT_EMAIL}}
{{end}}

# Lockfile location, to prevent concurrent access (default: $BASEDIR/lock)
#LOCKFILE="${BASEDIR}/lock"
{{if .Env.LOCKFILE}}
LOCKFILE={{.Env.LOCKFILE}}
{{end}}

# Option to add CSR-flag indicating OCSP stapling to be mandatory (default: no)
#OCSP_MUST_STAPLE="no"
{{if .Env.OCSP_MUST_STAPLE}}
OCSP_MUST_STAPLE={{.Env.OCSP_MUST_STAPLE}}
{{end}}

# Fetch OCSP responses (default: no)
#OCSP_FETCH="no"
{{if .Env.OCSP_FETCH}}
OCSP_FETCH={{.Env.OCSP_FETCH}}
{{end}}

# Issuer chain cache directory (default: $BASEDIR/chains)
#CHAINCACHE="${BASEDIR}/chains"
{{if .Env.CHAINCACHE}}
CHAINCACHE={{.Env.CHAINCACHE}}
{{end}}

# Automatic cleanup (default: no)
#AUTO_CLEANUP="no"
{{if .Env.AUTO_CLEANUP}}
AUTO_CLEANUP={{.Env.AUTO_CLEANUP}}
{{end}}



